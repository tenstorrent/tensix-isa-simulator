
#include "demo/llk_basic/sfpu_test.hpp"

namespace ronin {
namespace iss {
namespace whb0 {
namespace demo {
namespace llk_basic {

//
//    SfpuTest
//

//
//    [  0] 256 1024 1024 1024 256 256 512 256
//    [  8] 1024 512 256 1024 4 8 16 32
//    [ 16] 4 8 16 32 4 8 16 32
//    [ 24] 64 128 256 512 256 256 256 16
//

void SfpuTest::test6() {
    SFPLOAD(7, 0, 3, 0);
    SFPMOV(0x0, 7, 7, 1);
    SFPSTORE(7, 0, 3, 12);
// v_if(dst_reg[0] < 3.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4040);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(7, 0, 3, 0);
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOADI(7, 0, 0x4380);
    SFPSTORE(7, 0, 3, 12);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(7, 0, 3, 0);
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1c);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPMAD(10, 11, 6, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 6);
    SFPLOADI(6, 4, 0x1d);
    SFPMOV(0x0, 6, 7, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(6, 0, 0x4000);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 6);
    SFPLOADI(6, 4, 0x1e);
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe3, 7, 7, 5);
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOADI(7, 0, 0x4480);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] < 6.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x40c0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4040);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOADI(7, 0, 0x4380);
    SFPSTORE(7, 0, 3, 12);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4040);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x1c);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x4080);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1d);
    SFPMOV(0x0, 7, 6, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x40a0);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1e);
    SFPMOV(0x0, 7, 6, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOADI(7, 4, 0xffffffe3);
    SFPIADD(0x0, 7, 6, 4);
    SFPMOV(0x0, 6, 7, 0);
    SFPSETCC(0x0, 7, 0, 0);
    SFPLOADI(7, 0, 0x4480);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] < 9.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4110);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x40c0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOADI(7, 0, 0x4180);
    SFPSTORE(7, 0, 3, 12);
    SFPLOADI(6, 4, 0x3);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x40c0);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1c);
    SFPMOV(0x0, 7, 6, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x40e0);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1d);
    SFPMOV(0x0, 7, 6, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x4100);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1e);
    SFPMOV(0x0, 7, 6, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOADI(7, 0, 0x4300);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe3, 6, 5, 9);
    SFPLOADI(5, 0, 0x4380);
    SFPMOV(0x0, 5, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe3, 6, 5, 1);
    SFPLOADI(5, 0, 0x4400);
    SFPMOV(0x0, 5, 7, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe2, 6, 6, 9);
    SFPLOADI(6, 0, 0x4480);
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] < 12.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4140);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4110);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOADI(7, 0, 0x4180);
    SFPSTORE(7, 0, 3, 12);
    SFPLOADI(6, 4, 0x3);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x4110);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1c);
    SFPMOV(0x0, 7, 6, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x4120);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1d);
    SFPMOV(0x0, 7, 6, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x4130);
    SFPMAD(7, 11, 5, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x1e);
    SFPMOV(0x0, 7, 6, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOADI(7, 0, 0x4300);
    SFPLOADI(5, 4, 0x1d);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 5, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPLOADI(4, 0, 0x4380);
    SFPMOV(0x0, 4, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0x0, 6, 5, 2);
    SFPLOADI(5, 0, 0x4400);
    SFPMOV(0x0, 5, 7, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe2, 6, 6, 9);
    SFPLOADI(6, 0, 0x4480);
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] == 12.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4140);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x19);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe7, 7, 6, 9);
    SFPIADD(0xffffffe6, 7, 6, 1);
    SFPLOADI(6, 0, 0x4080);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4150);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x14);
    SFPIADD(0xc, 7, 6, 5);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe0, 7, 6, 9);
    SFPIADD(0xffffffdf, 7, 6, 1);
    SFPLOADI(6, 0, 0x4100);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4160);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x12);
    SFPLOADI(6, 4, 0xfffffffa);
    SFPIADD(0x0, 7, 6, 4);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffff4, 7, 6, 9);
    SFPIADD(0xfffffff3, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4170);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xe);
    SFPLOADI(6, 4, 0xfffffffb);
    SFPIADD(0x0, 7, 6, 4);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffff7, 7, 6, 9);
    SFPIADD(0xfffffff6, 7, 6, 1);
    SFPLOADI(6, 0, 0x4200);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] == 16.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4180);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x19);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe7, 7, 6, 9);
    SFPIADD(0xffffffe6, 7, 6, 1);
    SFPLOADI(6, 0, 0x4080);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4188);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x14);
    SFPIADD(0xfffffff4, 7, 6, 5);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffff8, 7, 6, 9);
    SFPIADD(0xfffffff7, 7, 6, 1);
    SFPLOADI(6, 0, 0x4100);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4190);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x12);
    SFPLOADI(6, 4, 0x6);
    SFPIADD(0x0, 7, 6, 6);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffff4, 7, 6, 9);
    SFPIADD(0xfffffff3, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4198);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xe);
    SFPLOADI(6, 4, 0x5);
    SFPMOV(0x0, 6, 5, 2);
    SFPMOV(0x0, 7, 6, 2);
    SFPIADD(0x0, 5, 6, 6);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0x9, 7, 6, 9);
    SFPIADD(0x8, 7, 6, 1);
    SFPLOADI(6, 0, 0x4200);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] == 20.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41a0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x19);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe7, 7, 6, 9);
    SFPIADD(0xffffffe6, 7, 6, 1);
    SFPLOADI(6, 0, 0x4080);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41a8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x14);
    SFPIADD(0xfffffff4, 7, 6, 5);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffff8, 7, 6, 9);
    SFPIADD(0xfffffff7, 7, 6, 1);
    SFPLOADI(6, 0, 0x4100);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41b0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x12);
    SFPLOADI(6, 4, 0x6);
    SFPIADD(0x0, 7, 6, 6);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffff4, 7, 6, 9);
    SFPIADD(0xfffffff3, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41b8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xe);
    SFPLOADI(6, 4, 0x5);
    SFPMOV(0x0, 6, 5, 2);
    SFPMOV(0x0, 7, 6, 2);
    SFPIADD(0x0, 5, 6, 6);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0x9, 7, 6, 9);
    SFPIADD(0x8, 7, 6, 1);
    SFPLOADI(6, 0, 0x4200);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] == 24.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41c0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xa);
    SFPLOADI(6, 4, 0x14);
    SFPIADD(0x0, 7, 6, 6);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xa, 7, 6, 9);
    SFPIADD(0x9, 7, 6, 1);
    SFPLOADI(6, 0, 0x4280);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41c8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xa);
    SFPLOADI(6, 4, 0x14);
    SFPIADD(0x0, 7, 6, 4);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffe2, 7, 6, 9);
    SFPIADD(0xffffffe1, 7, 6, 1);
    SFPLOADI(6, 0, 0x4300);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] == 26.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41d0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xa);
    SFPLOADI(6, 4, 0x1000);
    SFPIADD(0x0, 7, 6, 4);
    SFPMOV(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 4, 0x100a);
    SFPIADD(0x0, 7, 6, 10);
    SFPLOADI(6, 4, 0x100b);
    SFPIADD(0x0, 7, 6, 2);
    SFPLOADI(6, 0, 0x4380);
    SFPSTORE(6, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41d8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x1000);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(7, 4, 0x1000);
    SFPIADD(0x0, 6, 7, 10);
    SFPLOADI(7, 0, 0x4400);
    SFPSTORE(7, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(7, 0, 0x0);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] >= 28.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41e0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41e0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffc8, 15, 7, 9);
    SFPIADD(0xffffffc7, 15, 7, 1);
    SFPLOADI(7, 0, 0x4380);
    SFPSTORE(7, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(15, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41e8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffc6, 15, 7, 9);
    SFPIADD(0xffffffc5, 15, 7, 1);
    SFPLOADI(7, 0, 0x4380);
    SFPSTORE(7, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(15, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41f0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffffc4, 15, 7, 9);
    SFPIADD(0xffffffc3, 15, 7, 1);
    SFPLOADI(7, 0, 0x4380);
    SFPSTORE(7, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(15, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] == 31.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41f8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 0, 0x4040);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(7, 0, 0x4040);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 0, 0x4080);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 2);
    SFPLOADI(7, 0, 0x4180);
    SFPSTORE(7, 0, 3, 12);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(7, 0, 0x4200);
    SFPSTORE(7, 0, 3, 12);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
    SFPLOAD(7, 0, 3, 12);
    SFPSTORE(7, 0, 3, 0);
}

} // namespace llk_basic
} // namespace demo
} // namespace whb0
} // namespace iss
} // namespace ronin

