// SPDX-FileCopyrightText: Â© 2023 Tenstorrent Inc.
//
// SPDX-License-Identifier: Apache-2.0

#include "demo/llk_basic/sfpu_test.hpp"

namespace ronin {
namespace iss {
namespace whb0 {
namespace demo {
namespace llk_basic {

//
//    SfpuTest
//

//
//    [  0] -0 16 16 16 16 20 20 20
//    [  8] 20 22 100 100 24 26 32 16
//    [ 16] 48 31 14 -3 1712 176 1872 1712
//    [ 24] 176 1872 1712 176 1872 32 64 32
//

void SfpuTest::test8() {
    SFPLOAD(7, 0, 3, 0);
    SFPMOV(0x0, 7, 7, 1);
    SFPSTORE(7, 0, 3, 16);
// v_if(dst_reg[0] == 1.0F)
    SFPLOAD(7, 0, 3, 0);
    SFPMAD(10, 11, 7, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x5ff);
    SFPLOADI(7, 4, 0xaaa);
    SFPAND(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffff56, 7, 6, 9);
    SFPIADD(0xffffff55, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4000);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x5ff);
    SFPLOADI(6, 4, 0xaaa);
    SFPAND(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffff56, 7, 6, 9);
    SFPIADD(0xffffff55, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4040);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x5ff);
    SFPLOADI(7, 4, 0xaaa);
    SFPAND(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffff56, 7, 6, 9);
    SFPIADD(0xffffff55, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4080);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x5ff);
    SFPLOADI(6, 4, 0xaaa);
    SFPAND(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffff56, 7, 6, 9);
    SFPIADD(0xffffff55, 7, 6, 1);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] == 5.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x40a0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x111);
    SFPLOADI(7, 4, 0x444);
    SFPOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffaab, 7, 6, 9);
    SFPIADD(0xfffffaaa, 7, 6, 1);
    SFPLOADI(6, 0, 0x41a0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x40c0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x111);
    SFPLOADI(7, 4, 0x444);
    SFPOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffaab, 7, 6, 9);
    SFPIADD(0xfffffaaa, 7, 6, 1);
    SFPLOADI(6, 0, 0x41a0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x40e0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x111);
    SFPLOADI(7, 4, 0x444);
    SFPOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffaab, 7, 6, 9);
    SFPIADD(0xfffffaaa, 7, 6, 1);
    SFPLOADI(6, 0, 0x41a0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4100);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 4, 0x111);
    SFPLOADI(7, 4, 0x444);
    SFPOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffaab, 7, 6, 9);
    SFPIADD(0xfffffaaa, 7, 6, 1);
    SFPLOADI(6, 0, 0x41a0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] == 9.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4110);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xaaa);
    SFPNOT(0x0, 7, 6, 0);
    SFPMOV(0x0, 6, 7, 0);
    SFPLOADI(6, 4, 0xfff);
    SFPAND(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xfffffaab, 7, 6, 9);
    SFPIADD(0xfffffaaa, 7, 6, 1);
    SFPLOADI(6, 0, 0x41b0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4120);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 0, 0x42c8);
    SFPABS(0x0, 7, 7, 1);
    SFPSTORE(7, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4130);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 0, 0xc2c8);
    SFPABS(0x0, 7, 7, 1);
    SFPSTORE(7, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4140);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0x64);
    SFPABS(0x0, 7, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffff9c, 7, 6, 9);
    SFPIADD(0xffffff9b, 7, 6, 1);
    SFPLOADI(6, 0, 0x41c0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4150);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 4, 0xffffff9c);
    SFPABS(0x0, 7, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0xffffff9c, 7, 6, 9);
    SFPIADD(0xffffff9b, 7, 6, 1);
    SFPLOADI(6, 0, 0x41d0);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPENCC(0x3, 0, 0, 10);
// v_if (test_interleaved_scalar_vector_cond(true, dst_reg[0], 14.0F, 15.0F))
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4160);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 0, 0x4200);
    SFPSTORE(7, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x4170);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 0, 0x4180);
    SFPSTORE(7, 0, 3, 16);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
    SFPLOAD(7, 0, 3, 16);
// v_block
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(6, 0, 0x4180);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(6, 0, 0x41a0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 0);
    SFPLOADI(6, 0, 0x4180);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(6, 0, 0x4198);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 0);
    SFPLOADI(6, 0, 0x4180);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(6, 0, 0x4190);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 0);
    SFPLOADI(6, 0, 0x4180);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(6, 0, 0x4188);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 0);
    SFPLOADI(6, 0, 0x4180);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
// v_endblock
    SFPENCC(0x3, 0, 0, 10);
    SFPSTORE(7, 0, 3, 16);
// v_if (dst_reg[0] >= 20.0f && dst_reg[0] < 23.0f)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41a0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41b8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPMOV(0x0, 15, 6, 2);
    SFPSHFT(0xffffffff, 0, 6, 1);
    SFPLOADI(7, 4, 0x14);
    SFPLOADI(5, 4, 0x15);
    SFPLOADI(4, 0, 0x4180);
    SFPSTORE(4, 0, 3, 16);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 5, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPSETCC(0x0, 4, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(3, 0, 0x4200);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 5, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPSETCC(0x0, 4, 0, 2);
    SFPLOADI(3, 0, 0x4280);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 5, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPSETCC(0x0, 4, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(3, 0, 0x4300);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 5, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPSETCC(0x0, 4, 0, 2);
    SFPLOADI(3, 0, 0x4380);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 7, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPSETCC(0x0, 4, 0, 2);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMOV(0x0, 5, 4, 2);
    SFPIADD(0x0, 6, 4, 10);
    SFPSETCC(0x0, 4, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(4, 4, 0x0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPSETCC(0x0, 4, 0, 6);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(3, 0, 0x4400);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPIADD(0x0, 6, 5, 10);
    SFPSETCC(0x0, 5, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPIADD(0x0, 6, 7, 10);
    SFPSETCC(0x0, 7, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x4480);
    SFPLOAD(7, 0, 3, 16);
    SFPADD(7, 10, 6, 7, 0);
    SFPNOP();
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] >= 23.0f && dst_reg[0] < 26.0f)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41b8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41d0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPLOAD(5, 0, 3, 0);
    SFPLOADI(7, 0, 0x4180);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41c0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x4200);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41c0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPLOADI(6, 0, 0x4280);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41c0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x4300);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41c0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPLOADI(6, 0, 0x4380);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41b8);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41c0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 4, 0x0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPSETCC(0x0, 6, 0, 6);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x4400);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41c0);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x41b8);
    SFPMAD(6, 11, 5, 6, 0);
    SFPNOP();
    SFPSETCC(0x0, 6, 0, 4);
    SFPSETCC(0x0, 6, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x4480);
    SFPADD(7, 10, 6, 6, 0);
    SFPNOP();
    SFPMOV(0x0, 6, 7, 0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if (dst_reg[0] >= 26.0f && dst_reg[0] < 29.0f)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41d0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41e8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 0);
    SFPLOADI(7, 0, 0x41d0);
    SFPLOADI(5, 0, 0x41d8);
    SFPLOADI(6, 0, 0x4180);
    SFPSTORE(6, 0, 3, 16);
    SFPLOAD(6, 0, 3, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(5, 11, 6, 4, 0);
    SFPNOP();
    SFPSETCC(0x0, 4, 0, 4);
    SFPSETCC(0x0, 4, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(3, 0, 0x4200);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOAD(4, 0, 3, 0);
    SFPMOV(0x0, 4, 6, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(5, 11, 6, 4, 0);
    SFPNOP();
    SFPSETCC(0x0, 4, 0, 4);
    SFPSETCC(0x0, 4, 0, 2);
    SFPLOADI(3, 0, 0x4280);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOAD(4, 0, 3, 0);
    SFPMOV(0x0, 4, 6, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(5, 11, 6, 4, 0);
    SFPNOP();
    SFPSETCC(0x0, 4, 0, 4);
    SFPSETCC(0x0, 4, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(3, 0, 0x4300);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOAD(4, 0, 3, 0);
    SFPMOV(0x0, 4, 6, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(5, 11, 6, 4, 0);
    SFPNOP();
    SFPSETCC(0x0, 4, 0, 4);
    SFPSETCC(0x0, 4, 0, 2);
    SFPLOADI(3, 0, 0x4380);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOAD(4, 0, 3, 0);
    SFPMOV(0x0, 4, 6, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(7, 11, 6, 4, 0);
    SFPNOP();
    SFPSETCC(0x0, 4, 0, 4);
    SFPSETCC(0x0, 4, 0, 2);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(5, 11, 6, 4, 0);
    SFPNOP();
    SFPSETCC(0x0, 4, 0, 4);
    SFPSETCC(0x0, 4, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(4, 4, 0x0);
    SFPPOPC(0x0, 0, 0, 0);
    SFPSETCC(0x0, 4, 0, 6);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(3, 0, 0x4400);
    SFPLOAD(4, 0, 3, 16);
    SFPADD(4, 10, 3, 4, 0);
    SFPNOP();
    SFPSTORE(4, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
    SFPLOAD(4, 0, 3, 0);
    SFPMOV(0x0, 4, 6, 0);
    SFPLOADI(4, 0, 0x41d0);
    SFPMOV(0x0, 4, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPMAD(5, 11, 6, 5, 0);
    SFPNOP();
    SFPSETCC(0x0, 5, 0, 4);
    SFPSETCC(0x0, 5, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 4);
    SFPSETCC(0x0, 7, 0, 2);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPLOADI(6, 0, 0x4480);
    SFPLOAD(7, 0, 3, 16);
    SFPADD(7, 10, 6, 7, 0);
    SFPNOP();
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] == 29.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41e8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 2, 0xa5a5);
    SFPLOADI(6, 2, 0xff00);
    SFPXOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 4, 0x5aa5);
    SFPIADD(0x0, 7, 6, 10);
    SFPLOADI(6, 4, 0x5aa6);
    SFPIADD(0x0, 7, 6, 2);
    SFPLOADI(6, 0, 0x4200);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] == 30.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41f0);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(7, 2, 0xa5a5);
    SFPLOADI(6, 2, 0xff00);
    SFPXOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 4, 0x5aa5);
    SFPIADD(0x0, 7, 6, 10);
    SFPLOADI(6, 4, 0x5aa6);
    SFPIADD(0x0, 7, 6, 2);
    SFPLOADI(6, 0, 0x4280);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
// v_if(dst_reg[0] == 31.0F)
    SFPLOAD(6, 0, 3, 0);
    SFPLOADI(7, 0, 0x41f8);
    SFPMAD(7, 11, 6, 7, 0);
    SFPNOP();
    SFPSETCC(0x0, 7, 0, 6);
    SFPLOADI(6, 2, 0xa5a5);
    SFPLOADI(7, 2, 0xff00);
    SFPXOR(0x0, 6, 7, 0);
    SFPPUSHC(0x0, 0, 0, 0);
    SFPLOADI(6, 4, 0x5aa5);
    SFPIADD(0x0, 7, 6, 10);
    SFPLOADI(6, 4, 0x5aa6);
    SFPIADD(0x0, 7, 6, 2);
    SFPLOADI(6, 0, 0x4200);
    SFPSTORE(6, 0, 3, 16);
    SFPCOMPC(0x0, 0, 0, 0);
    SFPSTORE(7, 0, 3, 16);
    SFPPOPC(0x0, 0, 0, 0);
// v_endif
    SFPENCC(0x3, 0, 0, 10);
    SFPLOAD(7, 0, 3, 16);
    SFPSTORE(7, 0, 3, 0);
}

} // namespace llk_basic
} // namespace demo
} // namespace whb0
} // namespace iss
} // namespace ronin

